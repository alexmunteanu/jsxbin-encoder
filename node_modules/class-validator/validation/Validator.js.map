{"version":3,"sources":["../../src/validation/Validator.ts"],"names":[],"mappings":"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","file":"Validator.js","sourcesContent":["import {ValidationMetadata} from \"../metadata/ValidationMetadata\";\nimport {ValidationTypes} from \"./ValidationTypes\";\nimport {ValidationError} from \"./ValidationError\";\nimport {IsNumberOptions} from \"./ValidationTypeOptions\";\nimport {ValidatorOptions} from \"./ValidatorOptions\";\nimport {ValidationExecutor} from \"./ValidationExecutor\";\nimport {ValidationOptions} from \"../decorator/ValidationOptions\";\nimport * as validator from \"validator\";\n\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nexport class Validator {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private webSafeRegex = /^[a-zA-Z0-9_-]*$/;\n    private validatorJs = validator;\n    private libPhoneNumber = {\n        phoneUtil: require(\"google-libphonenumber\").PhoneNumberUtil.getInstance(),\n    };\n    private _isEmptyObject = function(object: object) {\n        for (const key in object) {\n            if (object.hasOwnProperty(key)) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     * Common method for `validateOrReject` and `validate` methods.\n     */\n    private coreValidate(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): Promise<ValidationError[]> {\n        const object = typeof objectOrSchemaName === \"string\" ? objectOrValidationOptions as Object : objectOrSchemaName as Object;\n        const options = typeof objectOrSchemaName === \"string\" ? maybeValidatorOptions : objectOrValidationOptions as ValidationOptions;\n        const schema = typeof objectOrSchemaName === \"string\" ? objectOrSchemaName as string : undefined;\n\n        const executor = new ValidationExecutor(this, options);\n        const validationErrors: ValidationError[] = [];\n        executor.execute(object, schema, validationErrors);\n\n        return Promise.all(executor.awaitingPromises).then(() => {\n            return executor.stripEmptyErrors(validationErrors);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs validation of the given object based on decorators used in given object class.\n     */\n    validate(object: Object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n    /**\n     * Performs validation of the given object based on validation schema.\n     */\n    validate(schemaName: string, object: Object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     */\n    validate(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): Promise<ValidationError[]> {\n        return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    }\n\n    /**\n     * Performs validation of the given object based on decorators used in given object class and reject on error.\n     */\n    validateOrReject(object: Object, options?: ValidatorOptions): Promise<void>;\n\n    /**\n     * Performs validation of the given object based on validation schema and reject on error.\n     */\n    validateOrReject(schemaName: string, object: Object, options?: ValidatorOptions): Promise<void>;\n\n    /**\n     * Performs validation of the given object based on decorators or validation schema and reject on error.\n     */\n    async validateOrReject(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): Promise<void> {\n        const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n        if (errors.length)\n            return Promise.reject(errors);\n    }\n\n    /**\n     * Performs validation of the given object based on decorators used in given object class.\n     * NOTE: This method completely ignores all async validations.\n     */\n    validateSync(object: Object, options?: ValidatorOptions): ValidationError[];\n\n    /**\n     * Performs validation of the given object based on validation schema.\n     */\n    validateSync(schemaName: string, object: Object, options?: ValidatorOptions): ValidationError[];\n\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     */\n    validateSync(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): ValidationError[] {\n        const object = typeof objectOrSchemaName === \"string\" ? objectOrValidationOptions as Object : objectOrSchemaName as Object;\n        const options = typeof objectOrSchemaName === \"string\" ? maybeValidatorOptions : objectOrValidationOptions as ValidationOptions;\n        const schema = typeof objectOrSchemaName === \"string\" ? objectOrSchemaName as string : undefined;\n\n        const executor = new ValidationExecutor(this, options);\n        executor.ignoreAsyncValidations = true;\n        const validationErrors: ValidationError[] = [];\n        executor.execute(object, schema, validationErrors);\n        return executor.stripEmptyErrors(validationErrors);\n    }\n\n    /**\n     * Performs validation of the given object based on the given ValidationMetadata object.\n     */\n    validateValueByMetadata(value: any, metadata: ValidationMetadata): boolean {\n        switch (metadata.type) {\n            /* common checkers */\n            case ValidationTypes.IS_DEFINED:\n                return this.isDefined(value);\n            case ValidationTypes.EQUALS:\n                return this.equals(value, metadata.constraints[0]);\n            case ValidationTypes.NOT_EQUALS:\n                return this.notEquals(value, metadata.constraints[0]);\n            case ValidationTypes.IS_EMPTY:\n                return this.isEmpty(value);\n            case ValidationTypes.IS_NOT_EMPTY:\n                return this.isNotEmpty(value);\n            case ValidationTypes.IS_IN:\n                return this.isIn(value, metadata.constraints[0]);\n            case ValidationTypes.IS_NOT_IN:\n                return this.isNotIn(value, metadata.constraints[0]);\n\n            /* type checkers */\n            case ValidationTypes.IS_LATLONG:\n                return this.isLatLong(value);\n            case ValidationTypes.IS_LATITUDE:\n                return this.isLatitude(value);\n            case ValidationTypes.IS_LONGITUDE:\n                return this.isLongitude(value);\n            case ValidationTypes.IS_BOOLEAN:\n                return this.isBoolean(value);\n            case ValidationTypes.IS_DATE:\n                return this.isDate(value);\n            case ValidationTypes.IS_STRING:\n                return this.isString(value);\n            case ValidationTypes.IS_DATE_STRING:\n                return this.isDateString(value);\n            case ValidationTypes.IS_ARRAY:\n                return this.isArray(value);\n            case ValidationTypes.IS_NUMBER:\n                return this.isNumber(value, metadata.constraints[0]);\n            case ValidationTypes.IS_INT:\n                return this.isInt(value);\n            case ValidationTypes.IS_ENUM:\n                return this.isEnum(value, metadata.constraints[0]);\n\n            /* number checkers */\n            case ValidationTypes.IS_DIVISIBLE_BY:\n                return this.isDivisibleBy(value, metadata.constraints[0]);\n            case ValidationTypes.IS_POSITIVE:\n                return this.isPositive(value);\n            case ValidationTypes.IS_NEGATIVE:\n                return this.isNegative(value);\n            case ValidationTypes.MIN:\n                return this.min(value, metadata.constraints[0]);\n            case ValidationTypes.MAX:\n                return this.max(value, metadata.constraints[0]);\n\n            /* date checkers */\n            case ValidationTypes.MIN_DATE:\n                return this.minDate(value, metadata.constraints[0]);\n            case ValidationTypes.MAX_DATE:\n                return this.maxDate(value, metadata.constraints[0]);\n\n            /* string-as-type checkers */\n            case ValidationTypes.IS_BOOLEAN_STRING:\n                return this.isBooleanString(value);\n            case ValidationTypes.IS_NUMBER_STRING:\n                return this.isNumberString(value);\n\n            /* string checkers */\n            case ValidationTypes.CONTAINS:\n                return this.contains(value, metadata.constraints[0]);\n            case ValidationTypes.NOT_CONTAINS:\n                return this.notContains(value, metadata.constraints[0]);\n            case ValidationTypes.IS_ALPHA:\n                return this.isAlpha(value, metadata.constraints[0]);\n            case ValidationTypes.IS_ALPHANUMERIC:\n                return this.isAlphanumeric(value, metadata.constraints[0]);\n            case ValidationTypes.IS_DECIMAL:\n                return this.isDecimal(value, metadata.constraints[0]);\n            case ValidationTypes.IS_ASCII:\n                return this.isAscii(value);\n            case ValidationTypes.IS_BASE64:\n                return this.isBase64(value);\n            case ValidationTypes.IS_BYTE_LENGTH:\n                return this.isByteLength(value, metadata.constraints[0], metadata.constraints[1]);\n            case ValidationTypes.IS_CREDIT_CARD:\n                return this.isCreditCard(value);\n            case ValidationTypes.IS_CURRENCY:\n                return this.isCurrency(value, metadata.constraints[0]);\n            case ValidationTypes.IS_EMAIL:\n                return this.isEmail(value, metadata.constraints[0]);\n            case ValidationTypes.IS_FQDN:\n                return this.isFQDN(value, metadata.constraints[0]);\n            case ValidationTypes.IS_FULL_WIDTH:\n                return this.isFullWidth(value);\n            case ValidationTypes.IS_HALF_WIDTH:\n                return this.isHalfWidth(value);\n            case ValidationTypes.IS_VARIABLE_WIDTH:\n                return this.isVariableWidth(value);\n            case ValidationTypes.IS_HEX_COLOR:\n                return this.isHexColor(value);\n            case ValidationTypes.IS_HEXADECIMAL:\n                return this.isHexadecimal(value);\n            case ValidationTypes.IS_MAC_ADDRESS:\n                return this.isMACAddress(value);\n            case ValidationTypes.IS_IP:\n                return this.isIP(value, metadata.constraints[0]);\n            case ValidationTypes.IS_PORT:\n                return this.isPort(value);\n            case ValidationTypes.IS_ISBN:\n                return this.isISBN(value, metadata.constraints[0]);\n            case ValidationTypes.IS_ISIN:\n                return this.isISIN(value);\n            case ValidationTypes.IS_ISO8601:\n                return this.isISO8601(value, metadata.constraints[0]);\n            case ValidationTypes.IS_JSON:\n                return this.isJSON(value);\n            case ValidationTypes.IS_JWT:\n                return this.isJWT(value);\n            case ValidationTypes.IS_OBJECT:\n                return this.isObject(value);\n            case ValidationTypes.IS_NOT_EMPTY_OBJECT:\n                return this.isNotEmptyObject(value);\n            case ValidationTypes.IS_LOWERCASE:\n                return this.isLowercase(value);\n            case ValidationTypes.IS_MOBILE_PHONE:\n                return this.isMobilePhone(value, metadata.constraints[0]);\n            case ValidationTypes.IS_PHONE_NUMBER:\n                return this.isPhoneNumber(value, metadata.constraints[0]);\n            case ValidationTypes.IS_ISO31661_ALPHA_2:\n                return this.isISO31661Alpha2(value);\n            case ValidationTypes.IS_ISO31661_ALPHA_3:\n                return this.isISO31661Alpha3(value);\n            case ValidationTypes.IS_MONGO_ID:\n                return this.isMongoId(value);\n            case ValidationTypes.IS_MULTIBYTE:\n                return this.isMultibyte(value);\n            case ValidationTypes.IS_SURROGATE_PAIR:\n                return this.isSurrogatePair(value);\n            case ValidationTypes.IS_URL:\n                return this.isURL(value, metadata.constraints[0]);\n            case ValidationTypes.IS_UUID:\n                return this.isUUID(value, metadata.constraints[0]);\n            case ValidationTypes.IS_FIREBASE_PUSH_ID:\n                return this.IsFirebasePushId(value);\n            case ValidationTypes.IS_UPPERCASE:\n                return this.isUppercase(value);\n            case ValidationTypes.LENGTH:\n                return this.length(value, metadata.constraints[0], metadata.constraints[1]);\n            case ValidationTypes.MIN_LENGTH:\n                return this.minLength(value, metadata.constraints[0]);\n            case ValidationTypes.MAX_LENGTH:\n                return this.maxLength(value, metadata.constraints[0]);\n            case ValidationTypes.MATCHES:\n                return this.matches(value, metadata.constraints[0], metadata.constraints[1]);\n            case ValidationTypes.IS_MILITARY_TIME:\n                return this.isMilitaryTime(value);\n            case ValidationTypes.IS_HASH:\n                return this.isHash(value, metadata.constraints[0]);\n            case ValidationTypes.IS_ISSN:\n                return this.isISSN(value, metadata.constraints[0]);\n\n            /* array checkers */\n            case ValidationTypes.ARRAY_CONTAINS:\n                return this.arrayContains(value, metadata.constraints[0]);\n            case ValidationTypes.ARRAY_NOT_CONTAINS:\n                return this.arrayNotContains(value, metadata.constraints[0]);\n            case ValidationTypes.ARRAY_NOT_EMPTY:\n                return this.arrayNotEmpty(value);\n            case ValidationTypes.ARRAY_MIN_SIZE:\n                return this.arrayMinSize(value, metadata.constraints[0]);\n            case ValidationTypes.ARRAY_MAX_SIZE:\n                return this.arrayMaxSize(value, metadata.constraints[0]);\n            case ValidationTypes.ARRAY_UNIQUE:\n                return this.arrayUnique(value);\n\n            case ValidationTypes.IS_INSTANCE:\n                return this.isInstance(value, metadata.constraints[0]);\n        }\n        return true;\n    }\n\n    // -------------------------------------------------------------------------\n    // Validation Methods: common checkers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if value is defined (!== undefined, !== null).\n     */\n    isDefined(value: unknown): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    /**\n     * Checks if value matches (\"===\") the comparison.\n     */\n    equals(value: unknown, comparison: unknown): boolean {\n        return value === comparison;\n    }\n\n    /**\n     * Checks if value does not match (\"!==\") the comparison.\n     */\n    notEquals(value: unknown, comparison: unknown): boolean {\n        return value !== comparison;\n    }\n\n    /**\n     * Checks if given value is empty (=== '', === null, === undefined).\n     */\n    isEmpty(value: unknown): boolean {\n        return value === \"\" || value === null || value === undefined;\n    }\n\n    /**\n     * Checks if given value is not empty (!== '', !== null, !== undefined).\n     */\n    isNotEmpty(value: unknown): boolean {\n        return value !== \"\" && value !== null && value !== undefined;\n    }\n\n    /**\n     * Checks if given value is in a array of allowed values.\n     */\n    isIn(value: unknown, possibleValues: unknown[]): boolean {\n        return !(possibleValues instanceof Array) || possibleValues.some(possibleValue => possibleValue === value);\n    }\n\n    /**\n     * Checks if given value not in a array of allowed values.\n     */\n    isNotIn(value: unknown, possibleValues: unknown[]): boolean {\n        return !(possibleValues instanceof Array) || !possibleValues.some(possibleValue => possibleValue === value);\n    }\n\n    // -------------------------------------------------------------------------\n    // Validation Methods: type checkers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if a given value is a real boolean.\n     */\n    isBoolean(value: unknown): boolean {\n        return value instanceof Boolean || typeof value === \"boolean\";\n    }\n\n\n    /**\n    * Checks if a given value is a latitude.\n    */\n    isLatLong(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isLatLong(value);\n    }\n\n    /**\n    * Checks if a given value is a latitude.\n    */\n    isLatitude(value: unknown): boolean {\n        return (typeof value === \"number\" || this.isString(value)) && this.isLatLong(`0,${value}`);\n    }\n\n    /**\n    * Checks if a given value is a longitude.\n    */\n    isLongitude(value: unknown): boolean {\n        return (typeof value === \"number\" || this.isString(value)) && this.isLatLong(`${value},0`);\n    }\n\n    /**\n     * Checks if a given value is a real date.\n     */\n    isDate(value: unknown): boolean {\n        return value instanceof Date && !isNaN(value.getTime());\n    }\n\n    /**\n     * Checks if a given value is a real string.\n     */\n    isString(value: unknown): value is string {\n        return value instanceof String || typeof value === \"string\";\n    }\n\n    /**\n     * Checks if a given value is a ISOString date.\n     */\n    isDateString(value: unknown): boolean {\n        const regex = /^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?$/g;\n        return this.isString(value) && regex.test(value);\n    }\n\n    /**\n     * Checks if a given value is an array\n     */\n    isArray(value: unknown): boolean {\n        return value instanceof Array;\n    }\n\n    /**\n     * Checks if a given value is an enum\n     */\n    isEnum(value: unknown, entity: any): boolean {\n        const enumValues = Object.keys(entity)\n            .map(k => entity[k]);\n        return enumValues.indexOf(value) >= 0;\n    }\n\n    /**\n     * Checks if a given value is a number.\n     */\n    isNumber(value: unknown, options: IsNumberOptions = {}): boolean {\n        if (typeof value !== \"number\") {\n            return false;\n        }\n\n        if (value === Infinity || value === -Infinity) {\n            return options.allowInfinity;\n        }\n\n        if (Number.isNaN(value)) {\n            return options.allowNaN;\n        }\n\n        if (options.maxDecimalPlaces !== undefined) {\n            let decimalPlaces = 0;\n            if ((value % 1) !== 0) {\n                decimalPlaces = value.toString().split(\".\")[1].length;\n            }\n            if (decimalPlaces > options.maxDecimalPlaces) {\n                return false;\n            }\n        }\n\n        return Number.isFinite(value);\n    }\n\n    /**\n     * Checks if value is an integer.\n     */\n    isInt(val: unknown): boolean {\n        return typeof val === \"number\" && Number.isInteger(val);\n    }\n\n    // -------------------------------------------------------------------------\n    // Validation Methods: number checkers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if value is a number that's divisible by another.\n     */\n    isDivisibleBy(value: unknown, num: number): boolean {\n        return  typeof value === \"number\" &&\n            typeof num === \"number\" &&\n            this.validatorJs.isDivisibleBy(String(value), num);\n    }\n\n    /**\n     * Checks if the value is a positive number.\n     */\n    isPositive(value: unknown): boolean {\n        return typeof value === \"number\" && value > 0;\n    }\n\n    /**\n     * Checks if the value is a negative number.\n     */\n    isNegative(value: unknown): boolean {\n        return typeof value === \"number\" && value < 0;\n    }\n\n    /**\n     * Checks if the first number is greater than or equal to the second.\n     */\n    min(num: unknown, min: number): boolean {\n        return typeof num === \"number\" && typeof min === \"number\" && num >= min;\n    }\n\n    /**\n     * Checks if the first number is less than or equal to the second.\n     */\n    max(num: unknown, max: number): boolean {\n        return typeof num === \"number\" && typeof max === \"number\" && num <= max;\n    }\n\n    // -------------------------------------------------------------------------\n    // Validation Methods: date checkers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if the value is a date that's after the specified date.\n     */\n    minDate(date: unknown, minDate: Date): boolean {\n        return date instanceof Date && date.getTime() >= minDate.getTime();\n    }\n\n    /**\n     * Checks if the value is a date that's before the specified date.\n     */\n    maxDate(date: unknown, maxDate: Date): boolean {\n        return date instanceof Date && date.getTime() <= maxDate.getTime();\n    }\n\n    // -------------------------------------------------------------------------\n    // Validation Methods: string-as-type checkers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if a string is a boolean.\n     * If given value is not a string, then it returns false.\n     */\n    isBooleanString(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isBoolean(value);\n    }\n\n    /**\n     * Checks if the string is numeric.\n     * If given value is not a string, then it returns false.\n     */\n    isNumberString(value: unknown, options?: ValidatorJS.IsNumericOptions): boolean {\n        return typeof value === \"string\" && this.validatorJs.isNumeric(value, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Validation Methods: string checkers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if the string contains the seed.\n     * If given value is not a string, then it returns false.\n     */\n    contains(value: unknown, seed: string): boolean {\n        return typeof value === \"string\" && this.validatorJs.contains(value, seed);\n    }\n\n    /**\n     * Checks if the string does not contain the seed.\n     * If given value is not a string, then it returns false.\n     */\n    notContains(value: unknown, seed: string): boolean {\n        return typeof value === \"string\" && !this.validatorJs.contains(value, seed);\n    }\n\n    /**\n     * Checks if the string contains only letters (a-zA-Z).\n     * If given value is not a string, then it returns false.\n     */\n    isAlpha(value: unknown, locale?: ValidatorJS.AlphaLocale): boolean {\n        return typeof value === \"string\" && this.validatorJs.isAlpha(value, locale);\n    }\n\n    /**\n     * Checks if the string contains only letters and numbers.\n     * If given value is not a string, then it returns false.\n     */\n    isAlphanumeric(value: unknown, locale?: ValidatorJS.AlphanumericLocale): boolean {\n        return typeof value === \"string\" && this.validatorJs.isAlphanumeric(value, locale);\n    }\n\n    /**\n     * Checks if the string is a valid decimal.\n     * If given value is not a string, then it returns false.\n     */\n    isDecimal(value: unknown, options?: ValidatorJS.IsDecimalOptions): boolean {\n        return typeof value === \"string\" && this.validatorJs.isDecimal(value, options);\n    }\n\n\n    /**\n     * Checks if the string contains ASCII chars only.\n     * If given value is not a string, then it returns false.\n     */\n    isAscii(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isAscii(value);\n    }\n\n    /**\n     * Checks if a string is base64 encoded.\n     * If given value is not a string, then it returns false.\n     */\n    isBase64(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isBase64(value);\n    }\n\n    /**\n     * Checks if the string's length (in bytes) falls in a range.\n     * If given value is not a string, then it returns false.\n     */\n    isByteLength(value: unknown, min: number, max?: number): boolean {\n        return typeof value === \"string\" && this.validatorJs.isByteLength(value, min, max);\n    }\n\n    /**\n     * Checks if the string is a credit card.\n     * If given value is not a string, then it returns false.\n     */\n    isCreditCard(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isCreditCard(value);\n    }\n\n    /**\n     * Checks if the string is a valid currency amount.\n     * If given value is not a string, then it returns false.\n     */\n    isCurrency(value: unknown, options?: ValidatorJS.IsCurrencyOptions): boolean {\n        return typeof value === \"string\" && this.validatorJs.isCurrency(value, options);\n    }\n\n    /**\n     * Checks if the string is an email.\n     * If given value is not a string, then it returns false.\n     */\n    isEmail(value: unknown, options?: ValidatorJS.IsEmailOptions): boolean {\n        return typeof value === \"string\" && this.validatorJs.isEmail(value, options);\n    }\n\n    /**\n     * Checks if the string is a fully qualified domain name (e.g. domain.com).\n     * If given value is not a string, then it returns false.\n     */\n    isFQDN(value: unknown, options?: ValidatorJS.IsFQDNOptions): boolean {\n        return typeof value === \"string\" && this.validatorJs.isFQDN(value, options);\n    }\n\n    /**\n     * Checks if the string contains any full-width chars.\n     * If given value is not a string, then it returns false.\n     */\n    isFullWidth(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isFullWidth(value);\n    }\n\n    /**\n     * Checks if the string contains any half-width chars.\n     * If given value is not a string, then it returns false.\n     */\n    isHalfWidth(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isHalfWidth(value);\n    }\n\n    /**\n     * Checks if the string contains variable-width chars.\n     * If given value is not a string, then it returns false.\n     */\n    isVariableWidth(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isVariableWidth(value);\n    }\n\n    /**\n     * Checks if the string is a hexadecimal color.\n     * If given value is not a string, then it returns false.\n     */\n    isHexColor(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isHexColor(value);\n    }\n\n    /**\n     * Checks if the string is a hexadecimal number.\n     * If given value is not a string, then it returns false.\n     */\n    isHexadecimal(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isHexadecimal(value);\n    }\n\n    /**\n     * Check if the string is a MAC address.\n     * If given value is not a string, then it returns false.\n     */\n    isMACAddress(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isMACAddress(value);\n    }\n\n    /**\n     * Checks if the string is an IP (version 4 or 6).\n     * If given value is not a string, then it returns false.\n     */\n    isIP(value: unknown, version?: number): boolean {\n        return typeof value === \"string\" && this.validatorJs.isIP(value, version);\n    }\n\n    /**\n     * Check if the string is a valid port number.\n     */\n    isPort(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isPort(value);\n    }\n\n    /**\n     * Checks if the string is an ISBN (version 10 or 13).\n     * If given value is not a string, then it returns false.\n     */\n    isISBN(value: unknown, version?: number): boolean {\n        return typeof value === \"string\" && this.validatorJs.isISBN(value, version);\n    }\n\n    /**\n     * Checks if the string is an ISIN (stock/security identifier).\n     * If given value is not a string, then it returns false.\n     */\n    isISIN(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isISIN(value);\n    }\n\n    /**\n     * Checks if the string is a valid ISO 8601 date.\n     * If given value is not a string, then it returns false.\n     * Use the option strict = true for additional checks for a valid date, e.g. invalidates dates like 2019-02-29.\n     */\n    isISO8601(value: unknown, options?: ValidatorJS.IsISO8601Options): boolean {\n        return typeof value === \"string\" && this.validatorJs.isISO8601(value, options);\n    }\n\n    /**\n     * Checks if the string is valid JSON (note: uses JSON.parse).\n     * If given value is not a string, then it returns false.\n     */\n    isJSON(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isJSON(value);\n    }\n\n    /**\n     * Checks if the string is valid JWT token.\n     * If given value is not a string, then it returns false.\n     */\n    isJWT(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isJWT(value);\n    }\n\n    /**\n     * Checks if the value is valid Object.\n     * Returns false if the value is not an object.\n     */\n    isObject(value: unknown): value is object {\n        return value != null && (typeof value === \"object\" || typeof value === \"function\") && !Array.isArray(value);\n    }\n\n    /**\n     * Checks if the value is valid Object & not empty.\n     * Returns false if the value is not an object or an empty valid object.\n     */\n    isNotEmptyObject(value: unknown): boolean {\n        return this.isObject(value) && !this._isEmptyObject(value);\n    }\n\n    /**\n     * Checks if the string is lowercase.\n     * If given value is not a string, then it returns false.\n     */\n    isLowercase(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isLowercase(value);\n    }\n\n    /**\n     * Checks if the string is a mobile phone number (locale is one of ['zh-CN', 'zh-TW', 'en-ZA', 'en-AU', 'en-HK',\n     * 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU', 'nb-NO', 'nn-NO', 'vi-VN', 'en-NZ']).\n     * If given value is not a string, then it returns false.\n     */\n    isMobilePhone(value: unknown, locale: ValidatorJS.MobilePhoneLocale): boolean {\n        return typeof value === \"string\" && this.validatorJs.isMobilePhone(value, locale);\n    }\n\n    /**\n     * Checks if the string is a valid phone number.\n     * @param value the potential phone number string to test\n     * @param {string} region 2 characters uppercase country code (e.g. DE, US, CH).\n     * If users must enter the intl. prefix (e.g. +41), then you may pass \"ZZ\" or null as region.\n     * See [google-libphonenumber, metadata.js:countryCodeToRegionCodeMap on github]{@link https://github.com/ruimarinho/google-libphonenumber/blob/1e46138878cff479aafe2ce62175c6c49cb58720/src/metadata.js#L33}\n     */\n    isPhoneNumber(value: unknown, region: string): boolean {\n        try {\n            const phoneNum = this.libPhoneNumber.phoneUtil.parseAndKeepRawInput(value, region);\n            return this.libPhoneNumber.phoneUtil.isValidNumber(phoneNum);\n        } catch (error) {\n            // logging?\n            return false;\n        }\n    }\n\n    /**\n     * Check if the string is a valid [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) officially assigned country code.\n     */\n    isISO31661Alpha2(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isISO31661Alpha2(value);\n    }\n\n    /**\n     * Check if the string is a valid [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) officially assigned country code.\n     */\n    isISO31661Alpha3(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isISO31661Alpha3(value);\n    }\n\n    /**\n     * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n     * If given value is not a string, then it returns false.\n     */\n    isMongoId(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isMongoId(value);\n    }\n\n    /**\n     * Checks if the string contains one or more multibyte chars.\n     * If given value is not a string, then it returns false.\n     */\n    isMultibyte(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isMultibyte(value);\n    }\n\n    /**\n     * Checks if the string contains any surrogate pairs chars.\n     * If given value is not a string, then it returns false.\n     */\n    isSurrogatePair(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isSurrogatePair(value);\n    }\n\n    /**\n     * Checks if the string is an url.\n     * If given value is not a string, then it returns false.\n     */\n    isURL(value: unknown, options?: ValidatorJS.IsURLOptions): boolean {\n        return typeof value === \"string\" && this.validatorJs.isURL(value, options);\n    }\n\n    /**\n     * Checks if the string is a UUID (version 3, 4 or 5).\n     * If given value is not a string, then it returns false.\n     */\n    isUUID(value: unknown, version?: \"3\"|\"4\"|\"5\"|\"all\"): boolean {\n        return typeof value === \"string\" && this.validatorJs.isUUID(value, version);\n    }\n\n    /**\n     * Checks if the string is a Firebase Push Id\n     * If given value is not a Firebase Push Id, it returns false\n     */\n    IsFirebasePushId(value: unknown): boolean {\n        return typeof value === \"string\" && value.length === 20 && this.webSafeRegex.test(value);\n    }\n    /**\n     * Checks if the string is uppercase.\n     * If given value is not a string, then it returns false.\n     */\n    isUppercase(value: unknown): boolean {\n        return typeof value === \"string\" && this.validatorJs.isUppercase(value);\n    }\n\n    /**\n     * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n     * If given value is not a string, then it returns false.\n     */\n    length(value: unknown, min: number, max?: number): boolean {\n        return typeof value === \"string\" && this.validatorJs.isLength(value, min, max);\n    }\n\n    /**\n     * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n     * If given value is not a string, then it returns false.\n     */\n    minLength(value: unknown, min: number) {\n        return typeof value === \"string\" && this.length(value, min);\n    }\n\n    /**\n     * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n     * If given value is not a string, then it returns false.\n     */\n    maxLength(value: unknown, max: number) {\n        return typeof value === \"string\" && this.length(value, 0, max);\n    }\n\n    /**\n     * Checks if string matches the pattern. Either matches('foo', /foo/i) or matches('foo', 'foo', 'i').\n     * If given value is not a string, then it returns false.\n     */\n    matches(value: unknown, pattern: RegExp, modifiers?: string): boolean {\n        return typeof value === \"string\" && this.validatorJs.matches(value, pattern, modifiers);\n    }\n\n    /**\n     * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n     * If the given value does not match the pattern HH:MM, then it returns false.\n     */\n    isMilitaryTime(value: unknown): boolean {\n        return this.matches(value, /^([01]\\d|2[0-3]):?([0-5]\\d)$/);\n    }\n\n    /**\n     * check if the string is a hash of type algorithm.\n     * Algorithm is one of ['md4', 'md5', 'sha1', 'sha256', 'sha384', 'sha512', 'ripemd128', 'ripemd160', 'tiger128',\n     * 'tiger160', 'tiger192', 'crc32', 'crc32b']\n     */\n    isHash(value: unknown, algorithm: ValidatorJS.HashAlgorithm): boolean {\n        return typeof value === \"string\" && this.validatorJs.isHash(value, algorithm);\n    }\n\n    /**\n     * Checks if the string is a ISSN.\n     * If given value is not a string, then it returns false.\n     */\n    isISSN(value: unknown, options?: ValidatorJS.IsISSNOptions): boolean {\n        return typeof value === \"string\" && this.validatorJs.isISSN(value, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Validation Methods: array checkers\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if array contains all values from the given array of values.\n     * If null or undefined is given then this function returns false.\n     */\n    arrayContains(array: unknown, values: any[]) {\n        if (!(array instanceof Array))\n            return false;\n\n        return values.every(value => array.indexOf(value) !== -1);\n    }\n\n    /**\n     * Checks if array does not contain any of the given values.\n     * If null or undefined is given then this function returns false.\n     */\n    arrayNotContains(array: unknown, values: any[]) {\n        if (!(array instanceof Array))\n            return false;\n\n        return values.every(value => array.indexOf(value) === -1);\n    }\n\n    /**\n     * Checks if given array is not empty.\n     * If null or undefined is given then this function returns false.\n     */\n    arrayNotEmpty(array: unknown) {\n        return array instanceof Array && array.length > 0;\n    }\n\n    /**\n     * Checks if array's length is as minimal this number.\n     * If null or undefined is given then this function returns false.\n     */\n    arrayMinSize(array: unknown, min: number) {\n        return array instanceof Array && array.length >= min;\n    }\n\n    /**\n     * Checks if array's length is as maximal this number.\n     * If null or undefined is given then this function returns false.\n     */\n    arrayMaxSize(array: unknown, max: number) {\n        return array instanceof Array && array.length <= max;\n    }\n\n    /**\n     * Checks if all array's values are unique. Comparison for objects is reference-based.\n     * If null or undefined is given then this function returns false.\n     */\n    arrayUnique(array: unknown) {\n        if (!(array instanceof Array))\n            return false;\n\n        const uniqueItems = array.filter((a, b, c) => c.indexOf(a) === b);\n        return array.length === uniqueItems.length;\n    }\n\n    /**\n     * Checks if the value is an instance of the specified object.\n     */\n    isInstance(object: unknown, targetTypeConstructor: new (...args: any[]) => any) {\n        return targetTypeConstructor\n            && typeof targetTypeConstructor === \"function\"\n            && object instanceof targetTypeConstructor;\n    }\n\n}\n"],"sourceRoot":".."}